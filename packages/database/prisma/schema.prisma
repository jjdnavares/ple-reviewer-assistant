// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  userProgress  Progress[]
  examAttempts  ExamAttempt[]
  notes         Note[]
}

enum UserRole {
  USER
  ADMIN
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content Models
model Subject {
  id          String       @id @default(cuid())
  name        String
  description String?
  topics      Topic[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  exams       Exam[]
}

model Topic {
  id          String     @id @default(cuid())
  name        String
  description String?
  subjectId   String
  subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Topic?     @relation("TopicToSubtopic", fields: [parentId], references: [id])
  subtopics   Topic[]    @relation("TopicToSubtopic")
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Progress    Progress[]
}

model Question {
  id              String           @id @default(cuid())
  text            String
  explanation     String?          @db.Text
  difficulty      QuestionDifficulty @default(MEDIUM)
  subjectId       String
  subject         Subject          @relation(fields: [subjectId], references: [id])
  topicId         String?
  topic           Topic?           @relation(fields: [topicId], references: [id])
  options         Option[]
  correctOptionId String?
  source          String?
  sourceId        String?
  tags            String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  examQuestions   ExamQuestion[]
  examAttemptQuestions ExamAttemptQuestion[]
  vectorId        String?          @unique
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model Option {
  id            String    @id @default(cuid())
  text          String
  questionId    String
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrect     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attemptAnswers ExamAttemptAnswer[]
}

// Exam Models
model Exam {
  id               String        @id @default(cuid())
  title            String
  description      String?
  timeLimit        Int           @default(3600) // in seconds
  passingScore     Int           @default(70) // percentage
  isPublished      Boolean       @default(false)
  subjectId        String?
  subject          Subject?      @relation(fields: [subjectId], references: [id])
  questionCount    Int           @default(0)
  randomizeQuestions Boolean     @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  examQuestions    ExamQuestion[]
  examAttempts     ExamAttempt[]
}

model ExamQuestion {
  id         String   @id @default(cuid())
  examId     String
  exam       Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([examId, questionId])
  @@unique([examId, order])
}

model ExamAttempt {
  id               String               @id @default(cuid())
  userId           String
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  examId           String
  exam             Exam                 @relation(fields: [examId], references: [id], onDelete: Cascade)
  status           ExamAttemptStatus    @default(IN_PROGRESS)
  score            Int?
  startedAt        DateTime             @default(now())
  completedAt      DateTime?
  timeSpent        Int?                 // in seconds
  attemptQuestions ExamAttemptQuestion[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum ExamAttemptStatus {
  IN_PROGRESS
  COMPLETED
  TIMED_OUT
}

model ExamAttemptQuestion {
  id            String            @id @default(cuid())
  attemptId     String
  attempt       ExamAttempt       @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId    String
  question      Question          @relation(fields: [questionId], references: [id])
  isFlagged     Boolean           @default(false)
  order         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  answers       ExamAttemptAnswer[]

  @@unique([attemptId, questionId])
  @@unique([attemptId, order])
}

model ExamAttemptAnswer {
  id            String             @id @default(cuid())
  attemptQuestionId String
  attemptQuestion ExamAttemptQuestion @relation(fields: [attemptQuestionId], references: [id], onDelete: Cascade)
  optionId      String
  option        Option             @relation(fields: [optionId], references: [id])
  isSelected    Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([attemptQuestionId, optionId])
}

// Learning Models
model Progress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  status    ProgressStatus @default(NOT_STARTED)
  lastStudied DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  REVIEW_NEEDED
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// PDF Document Models
model PDFDocument {
  id        String   @id @default(cuid())
  title     String
  filename  String
  path      String
  size      Int      // in bytes
  pages     Int      @default(0)
  processed Boolean  @default(false)
  vectorized Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
